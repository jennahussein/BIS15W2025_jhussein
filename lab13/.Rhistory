library(readr)
dogs_ranking_dataset <- read_csv("~/Desktop/BIS15W2025_group14-main/dogs-ranking-dataset.csv")
View(dogs_ranking_dataset)
library(readr)
ShelterDogs <- read_csv("~/Desktop/BIS15W2025_group14-main/ShelterDogs.csv")
View(ShelterDogs)
library(tidyverse)
library(RColorBrewer)
library(paletteer)
library(janitor)
options(scipen=999) #cancels the use of scientific notation for the session
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv", na = c("", "NA", "\\"))
p <- homerange %>%
ggplot(aes(x=taxon, fill=trophic.guild))+
geom_bar(na.rm=T, position="dodge")
p <- homerange %>%
ggplot(aes(x=taxon, fill=trophic.guild))+
geom_bar(na.rm=T, position="dodge")
p
p + theme_linedraw()+
theme(axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "Trophic Guild")
p + theme_void()+
theme(axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL, #no name for the x axis
y= "n",
fill= "Trophic Guild")
p + theme_linedraw()+
theme(axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL, #no name for the x axis
y= "n",
fill= "Trophic Guild")
q <- homerange %>%
ggplot(aes(x = log10.mass, y = log10.preymass, color = taxon))+
geom_point(na.rm = T)+
q <- homerange %>%
ggplot(aes(x = log10.mass, y = log10.preymass, color = taxon))+
geom_point(na.rm = T)
q <- homerange %>%
ggplot(aes(x = log10.mass, y = log10.preymass, color = taxon))+
geom_point(na.rm = T)
q
q + theme_classic()
p+theme_linedraw()+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "Trophic Guild")
#install.packages("ggthemes")
library(ggthemes)
ls("package:ggthemes")[grepl("theme_", ls("package:ggthemes"))]
p +
theme_stata()+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "Trophic Guild")
q +
theme_pander()+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "Trophic Guild")
q +
theme_pander()+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "taxon)
q +
theme_pander()+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "taxon")
q +
theme_fivethirtyeight()+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "taxon")
q +
theme_clean()+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "taxon")
?RColorBrewer
display.brewer.pal(5,"Accent") #qualitative palette
p+scale_fill_brewer(palette = "Set2")+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "Trophic Guild")
p+scale_fill_brewer(palette = "3-class RdPu")+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "taxon")
p+scale_fill_brewer(palette = "Pastel1")+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "taxon")
p+scale_fill_brewer(palette = "Accent")+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "taxon")
q <- scale_color_brewer("Accent")
q <- scale_color_brewer("Accent")
q <- scale_color_brewer("Accent")
q
q+ scale_color_brewer("Accent")
q + scale_color_brewer("Accent")
q + scale_color_brewer("Accent")
q + theme_classic() #themes are an easy way to make nice looking plots without having to code for lots of adjustments
q <- homerange %>%
ggplot(aes(x = log10.mass, y = log10.preymass, color = taxon))+
geom_point(na.rm = T)
q
q + theme_classic() #themes are an easy way to make nice looking plots without having to code for lots of adjustments
q + scale_color_brewer("Accent")
colors <- paletteer::palettes_d_names
View(colors)
my_palette <- paletteer_d("ggsci::nrc_npg")
barplot(rep(1,6), axes=FALSE, col=my_palette)
p+scale_fill_manual(values=my_palette)+
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 60, hjust=1))+
labs(title = "Observations by Taxon in Homerange Data",
x = NULL,
y= "n",
fill= "Trophic Guild")
q + theme_classic()+
scale_color_manual(values = my_palette)
homerange %>%
ggplot(aes(x=taxon, y=log10.mass, fill=trophic.guild))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 60, hjust=1))
homerange %>%
ggplot(aes(x=taxon, y=log10.mass, fill=taxon))+
geom_boxplot()+
facet_wrap(~trophic.guild, ncol=2, labeller=label_both)+ # ~ means "by". wrap by trophic guild into two columns
theme(axis.text.x = element_text(angle = 60, hjust=1),
legend.position = "none",
strip.text = element_text(size = 12, face = "bold"))
homerange %>%
ggplot(aes(x=taxon, y=log10.mass))+
geom_boxplot()+
facet_grid(trophic.guild~.)+
theme(axis.text.x = element_text(angle = 60, hjust=1))
homerange %>%
ggplot(aes(x=taxon, y=log10.mass))+
geom_boxplot()+
facet_grid(.~trophic.guild)+
theme(axis.text.x = element_text(angle = 60, hjust=1))
homerange %>%
ggplot(aes(x=taxon, y=log10.mass))+
geom_boxplot()+
facet_grid(trophic.guild~thermoregulation)+
theme(axis.text.x = element_text(angle = 60, hjust=1))
View(q)
homerange %>%
ggplot(aes(x = thermoregulation,
y = log10.mass))+
geom_density(fill = "pink", color = "black")
homerange %>%
ggplot(aes(x = log10.mass))+
geom_density(fill = "pink", color = "black")+
facet_wrap(~thermoregulation)
homerange %>%
ggplot(aes(x = log10.mass))+
geom_density(fill = "pink", color = "black")+
facet_grid(.~locomotion)
library("tidyverse")
library("janitor")
library("lubridate") #this will help us manage dates
library("tidyverse")
library("janitor")
library("lubridate") #this will help us manage dates
spider_records <- read_csv("data/spider_records.csv")
glimpse(spider_records) #let's have a quick look
View(spider_records)
table_A <- read_csv("data/table_A.csv")
table_B <- read_csv("data/table_B.csv")
table_A
table_B
#join_type(firstTable, secondTable, by=columnTojoinOn)
inner_join(table_A, table_B, by="customer_ID")
left_join(table_A, table_B, by="customer_ID")
right_join(table_A, table_B, by="customer_ID")
full_join(table_A, table_B, by="customer_ID")
anti_join(table_A, table_B, by="customer_ID")
spiders_locs <- read_csv("data/spiders_locations.csv")
full_join(spider_records, spiders_locs, by = "Accession")
spides_with_locs <-
left_join(spider_records, spiders_locs, by = "Accession")
spiders_with_locs <-
left_join(spider_records, spiders_locs, by = "Accession")
names(spiders_with_locs)
day <- today()
day
str(day)
datetime <- now()
datetime
dateformat1 <- "20200922"
dateformat2 <- "09-22-2020"
dateformat3 <- "22/09/2020"
dateformat4 <- "09-22-2020 17:00:00"
dateformat5 <- "20200922 170000"
ymd(dateformat1)
ymd(dateformat1)
mdy(dateformat2)
ymd(dateformat1)
mdy(dateformat2)
dmy(dateformat3)
mdy_hms(dateformat4)
ymd(dateformat1)
mdy(dateformat2)
dmy(dateformat3)
mdy_hms(dateformat4)
ymd_hms(dateformat5)
ymd(dateformat1)
mdy(dateformat2)
dmy(dateformat3)
mdy_hms(dateformat4)
ymd_hms(dateformat5)
write.csv(spiders_with_locs, file = "spiders_with_locs.csv", row.names = F)
library(tidyverse)
library(janitor)
#install.packages("ggmap")
library(ggmap)
install.packages("ggmap")
library(ggmap)
install.packages("ggmap")
library(ggmap)
install.packages("ggmap")
#install.packages("ggmap")
library(ggmap)
register_stadiamaps("f113f1a6-aa40-4057-9e35-e450a479ada1", write = FALSE)
spiders <- read_csv("data/spiders_with_locs.csv")%>% clean_names()
spiders <- spiders %>% filter(latitude<=42)
spiders %>%
select(latitude, longitude) %>%
summary()
lat <- c(34.67, 41.80) #min and max from code chunk above
long <- c(-124.1, -115.5) #min and max from code chunk above
bbox <- make_bbox(long, lat, f = 0.03) #f is the fraction of the bounding box to add to the range bbox = bounding box. long first, lat second
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=7)
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=5)
ggmap(map1)
library(tidyverse)
library(janitor)
#install.packages("ggmap")
library(ggmap)
register_stadiamaps("f113f1a6-aa40-4057-9e35-e450a479ada1", write = FALSE)
spiders <- read_csv("data/spiders_with_locs.csv")%>% clean_names()
spiders <- spiders %>% filter(latitude<=42)
spiders %>%
select(latitude, longitude) %>% #min and max lat and long
summary()
lat <- c(34.67, 41.80) #min and max from code chunk above
long <- c(-124.1, -115.5) #min and max from code chunk above
bbox <- make_bbox(long, lat, f = 0.03) #f is the fraction of the bounding box to add to the range bbox = bounding box. long first, lat second
map1 <- get_stadiamap(bbox, maptype = "stamen_terrain", zoom=7)
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude), size=0.4) +
labs(x= "Longitude", y= "Latitude", title="Spider Locations")
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude), size=0.4) + #not using pipes. use layers.
labs(x= "Longitude", y= "Latitude", title="Spider Locations")
sharks <- read_csv("data/SharkIncidents_1950_2022_220302.csv") %>%
clean_names() %>%
filter(longitude !="NA" & latitude !="NA") %>% # pulling out NA locations
mutate(longitude = as.numeric(longitude)) # converting longitude to numeric
sharks_dups <- sharks %>%
distinct(location, .keep_all = TRUE) # remove duplicate locations, but keep the remaining variables
sharks_dups %>%
summary(dups)
sharks_dups %>%
select(latitude, longitude) %>%
summary(dups)
lat2 <- c(-32.59, 41.56) #min and max from code chunk above
long2 <- c(-124.7, -117.1) #min and max from code chunk above
bbox2 <- make_bbox(long, lat, f = 0.03)
map2 <- get_stadiamap(bbox2, maptype = "stamen_terrain", zoom=6)
ggmap(map2)
ggmap(map2) +
geom_point(data = sharks_dups, aes(longitude, latitude), size=0.4) + #not using pipes. use layers.
labs(x= "Longitude", y= "Latitude", title="Spider Locations")
ggmap(map2) +
geom_point(data = sharks_dups, aes(longitude, latitude), size=0.4, na.rm = T) + #not using pipes. use layers.
labs(x= "Longitude", y= "Latitude", title="Spider Locations")
lat2 <- c(-32.59, 41.56) #min and max from code chunk above
long2 <- c(-124.7, -117.1) #min and max from code chunk above
bbox2 <- make_bbox(long2, lat2, f = 0.03)
map2 <- get_stadiamap(bbox2, maptype = "stamen_terrain", zoom=6)
ggmap(map2)
ggmap(map2) +
geom_point(data = sharks_dups, aes(longitude, latitude), size=0.4, na.rm = T) + #not using pipes. use layers.
labs(x= "Longitude", y= "Latitude", title="Spider Locations")
lat2 <- c(-32.59, 41.56) #min and max from code chunk above
long2 <- c(-124.7, -117.1) #min and max from code chunk above
bbox2 <- make_bbox(long, lat, f = 0.03)
map2 <- get_stadiamap(bbox2, maptype = "stamen_terrain", zoom=6)
ggmap(map2)
ggmap(map2) +
geom_point(data = sharks_dups, aes(longitude, latitude), size=0.4, na.rm = T) + #not using pipes. use layers.
labs(x= "Longitude", y= "Latitude", title="Spider Locations")
ggmap(map2) +
geom_point(data = sharks_dups, aes(x= longitude, y= latitude), size=0.4, na.rm = T) + #not using pipes. use layers.
labs(x= "Longitude", y= "Latitude", title="Spider Locations")
ggmap(map2) +
geom_point(data = sharks_dups, aes(x= longitude, y= latitude), size=0.4, na.rm = T) + #not using pipes. use layers.
labs(x= "Longitude", y= "Latitude", title="Observations of Shark Attacks")
sharks_fatal <-  sharks_dups %>%
filter(injury == "fatal")
sharks_fatal <-  sharks_dups %>%
filter(injury == "fatal")
sharks_fatal %>%
select(longitude, latitude) %>%
summary()
lat3 <- c(-32.85, 39.58) #min and max from code chunk above
long3 <- c(-123.8, -117.3) #min and max from code chunk above
bbox3 <- make_bbox(long3, lat3, f = 0.03)
lat2 <- c(-32.59, 41.56) #min and max from code chunk above
long2 <- c(-117.1, -124.7) #min and max from code chunk above
bbox2 <- make_bbox(long, lat, f = 0.03)
map2 <- get_stadiamap(bbox2, maptype = "stamen_terrain", zoom=6)
ggmap(map2)
ggmap(map2) +
geom_point(data = sharks_dups, aes(x= longitude, y= latitude), size=0.4, na.rm = T) + #not using pipes. use layers.
labs(x= "Longitude", y= "Latitude", title="Observations of Shark Attacks")
sharks_fatal <-  sharks_dups %>%
filter(injury == "fatal")
sharks_fatal %>%
select(longitude, latitude) %>%
summary()
lat3 <- c(-32.85, 39.58) #min and max from code chunk above
long3 <- c(-123.8, -117.3) #min and max from code chunk above
bbox3 <- make_bbox(long3, lat3, f = 0.03)
map3 <- get_stadiamap(bbox3, maptype = "stamen_terrain", zoom=6))
map3 <- get_stadiamap(bbox3, maptype = "stamen_terrain", zoom=6)
ggmap(map3)
lat3 <- c(-32.85, 39.58) #min and max from code chunk above
long3 <- c(-117.3, -123.8) #min and max from code chunk above
bbox3 <- make_bbox(long3, lat3, f = 0.03)
map3 <- get_stadiamap(bbox3, maptype = "stamen_terrain", zoom=6)
ggmap(map3)
sharks_fatal <-  sharks_dups %>%
filter(injury == "fatal")
sharks_fatal %>%
select(longitude, latitude) %>%
summary()
lat3 <- c(-32.85, 39.58) #min and max from code chunk above
long3 <- c(-117.3, -123.8) #min and max from code chunk above
bbox3 <- make_bbox(long3, lat3, f = 0.03)
map3 <- get_stadiamap(bbox3, maptype = "stamen_terrain", zoom=6)
ggmap(map3)
map3 <- get_stadiamap(bbox3, maptype = "stamen_terrain", zoom=3)
ggmap(map3)
