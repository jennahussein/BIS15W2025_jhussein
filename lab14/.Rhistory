install.packages("shiny")
library(shiny)
install.packages("shiny")
#install.packages("shiny")
library(shiny)
library("tidyverse")
library("palmerpenguins")
runApp("plot_iris.R")
#runExample("04_mpg")
#runExample("04_mpg")
runExample("04_mpg")
runExample("02_text")
penguins %>%
ggplot(aes(x=bill_length_mm, y=body_mass_g))+
geom_point(na.rm=T)
library(shiny)
ui <- fluidPage(
selectInput("x", #we are naming the select input "x"
"Select x Variable", #this is what we want the user to see
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x", #we are naming the select input "x"
"Select x Variable", #this is what we want the user to see
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", #we are naming the select input "y"
"Select y Variable", #this is what we want the user to see
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
) #this closes the fluid page
server <- function(input, output, session) {
}
shinyApp(ui, server)
penguins %>%
ggplot(aes(x=bill_length_mm, y=body_mass_g, color=species))+
geom_point(na.rm=T)+
theme_light(base_size=14)
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
)
server <- function(input, output) {
output$plot <- rednerPlot({ #defining the output
ggplot(data = penguins,
aes_string(x = input$x #make sure to use aes_string
y = input$y, color = "species"))+
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
)
server <- function(input, output) {
output$plot <- rednerPlot({ #defining the output
ggplot(data = penguins,
aes_string(x = input$x #make sure to use aes_string,
y = input$y, color = "species"))+
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g")
)
server <- function(input, output) {
output$plot <- renderPlot({ #defining the output
ggplot(data = penguins,
aes_string(x = input$x #make sure to use aes_string,
y = input$y, color = "species"))+
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g"),
plotOutput(("plot", width = "500px", height = "400px"))
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
homerange %>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar(position="dodge")
homerange %>%
ggplot(aes(x=locomotion, fill=thermoregulation))+
geom_bar(position="dodge")
penguins <- penguins
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "body_mass_g"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output) {
output$plot <- renderPlot({ #defining the output
ggplot(data = penguins,
aes_string(x = input$x, y = input$y, color = "species"))+
geom_point(na.rm = T)+
theme_light(base_size = 14)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select Fill Variable",
choices = "trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select Fill Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select Fill Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = homerange,
aes_string(x = "locomotion", y = input$x))+
geom_bar(position = 'dodge', alpha = 0.6, color = "black")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select Fill Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = homerange,
aes_string(x = "locomotion", fill = input$x))+
geom_bar(position = 'dodge', alpha = 0.6, color = "black")
})
}
shinyApp(ui, server)
install.packages("shinydashboard")
install.packages("shinydashboard")
library(shiny)
ui <- fluidPage(
radioButtons("x",
"Select Fill Variable",
choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = homerange,
aes_string(x = "locomotion", fill = input$x))+
geom_bar(position = 'dodge', alpha = 0.6, color = "black")
})
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
ui <- fluidPage(titlePanel("Homerange App"),
radioButtons("x",
"Select Fill Variable",
choices=c("trophic.guild", "thermoregulation"),
selected="trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=homerange,
aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=14) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
runApp('~/Desktop/BIS15W2025_jhussein/homerangeapp.R')
runApp('~/Desktop/BIS15W2025_jhussein/homerangeapp.R')
runApp('~/Desktop/BIS15W2025_jhussein/homerangeapp.R')
runApp('~/Desktop/BIS15W2025_jhussein/homerangeapp.R')
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by Taxon"0,
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by Taxon",
selectInput("x",
"Select Taxon",
choices = unique(homerange$taxon),
selected = "birds"),
plotOutput("plot", width = "500px", height = "400px")
)
)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by Taxon",
selectInput("x",
"Select Taxon",
choices = unique(homerange$taxon),
selected = "birds"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by Taxon",
selectInput("x",
"Select Taxon",
choices = unique(homerange$taxon),
selected = "birds"),
plotOutput("plot", width = "500px", height = "400px"))
)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by Taxon"),
selectInput("x",
"Select Taxon",
choices = unique(homerange$taxon),
selected = "birds"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon == input$x) %>%
ggplot(aes(x = log10.hra))+
geom_density(fill = "steelblue", color = "black", alpha = 0.6)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
selectInput("y",
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
sliderInput("pointsize", "Select the PointSize", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
sliderInput("pointsize", "Select the PointSize", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #auto stop of app when closed
output$plot <- renderPlot({
ggplot(data = penguins,
aes_string(x = input$x, y = input$y, color = "species"))+
geom_point(size = input$pointsize)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
sliderInput("pointsize", "Select the PointSize", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #auto stop of app when closed
output$plot <- renderPlot({
ggplot(data = penguins,
aes_string(x = input$x, y = input$y, color = "species"))+
geom_point(size = input$pointsize)+
theme_light(base_size = 14)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "This is the Header"),
dashboardSidebar(title = "This is the Sidebar"),
dashboardBody() # this is where the output will go
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"), #adds a title
dashboardSidebar(disable=T), #turns off the sidebar
dashboardBody(
selectInput("x",
"Select X Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y",
"Select Y Variable",
choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
